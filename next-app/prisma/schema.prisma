// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Farmer {
  id                 String              @id @default(cuid())
  email              String              @unique
  name               String?
  token              String?
  password           String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  chats              Chat[]
}

model Chat {
  id             String           @id @default(uuid())
  question       String           
  response       String
  createdAt      DateTime         @default(now())
  userId         String
  farmer         Farmer           @relation(fields: [userId], references: [id])
}

model Product {
  id                      String        @id @default(uuid())
  name                    String
  priceInCents            Int
  filePath                String
  imagePath               String
  description             String
  isAvailableForPurchase  Boolean       @default(true)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  orders                  Order[]
  downloadVerifications    DownloadVerification[]      
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  orders         Order[]
}

model Order {
  id                 String       @id @default(uuid())
  pricePaidInCents   Int
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  userId             String
  productId          String
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  product            Product     @relation(fields: [productId], references: [id], onDelete: Restrict) //if we delete a product , donot delete the orders as we want to store the past orders
}

model DownloadVerification {
  id            String        @id @default(uuid())
  expiresAt     DateTime  
  createdAt     DateTime      @default(now())
  productId     String
  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade) //if we delete a product then delete all the download links associated with it
}